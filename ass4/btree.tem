/**
 * Default constructor for BTree.
 * @param maxNodeElems the maximum number of elements
 *        that can be stored in each B-Tree node
 */
template <typename T> btree::btree( size_t maxNodeElems = 40 ):
        _root(nullptr), _head(nullptr), _tail(nullptr), _maxNodeElems(maxNodeElems), _treeSize(0) { }


/**
 * Copy constructor
 * Creates a new B-Tree as a copy of original.
 *
 * @param original a const lvalue reference to a B-Tree object
 */
template <typename T> btree::btree( const btree<T>& original ):
        _root(nullptr), _head(nullptr), _tail(nullptr), _maxNodeElems(original._maxNodeElems), _treeSize(0){
    std::queue<typename btree<T>::Node*> queueNodes;
    queueNodes.push(original._root);
    while( queueNodes.size() != 0 ){
        typename btree<T>::Node* tmp = queueNodes.front();
        queueNodes.pop();
        for( size_t i=0; i<tmp->_size; i++ ){
            insert(tmp->_elem[i]);
        }
        if( tmp->is_full() ){
            for( size_t i=0; i<=tmp->_size; i++ ){
                if( tmp->_children[i] != nullptr ){}
                queueNodes.push( tmp->_children[i] );
            }
        }
    }
}

//Node* _head;
//Node* _tail;
//size_t _maxNodeElems; // The maximum number of node that can be stored in each B-tree node
//size_t _treeSize;     // The number of node in the B-tree


/**
 * Move constructor
 * Creates a new B-Tree by "stealing" from original.
 *
 * @param original an rvalue reference to a B-Tree object
 */
// Move constructor
template <typename T> btree::btree( btree<T>&& original ):
        _root(original._root),
        _head(original._head),
        _tail(original._tail),
        _maxNodeElems(original._maxNodeElems),
        _treeSize(original._treeSize) {

        original._root = nullptr;
        original._head = nullptr;
        original._tail = nullptr;
}




template <typename T>  btree<T>::~btree() {
    delete _root;
}



/**
 * Copy assignment
 * Replaces the contents of this object with a copy of rhs.
 * @param rhs a const lvalue reference to a B-Tree object
 */
template <typename T> btree::operator=( const btree<T>& rhs ): {
    if( this != &rhs ){
        delete _root;
        _root = nullptr;
        _head = nullptr;
        _tail = nullptr;

        std::queue<typename btree<T>::Node*> queueNodes;
        queueNodes.push(original._root);
        while( queueNodes.size() != 0 ){
            typename btree<T>::Node* tmp = queueNodes.front();
            queueNodes.pop();
            for( size_t i=0; i<tmp->_size; i++ ){
                insert(tmp->_elem[i]);
            }
            if( tmp->is_full() ){
                for( size_t i=0; i<=tmp->_size; i++ ){
                    if( tmp->_children[i] != nullptr ){}
                    queueNodes.push( tmp->_children[i] );
                }
            }
        }
        _maxNodeElems = rhs._maxNodeElems;
        _treeSize = rhs._treeSize;
    }
    return *this;
}



/**
 * Move assignment
 * Replaces the contents of this object with the "stolen"
 * contents of original.
 * @param rhs a const reference to a B-Tree object
 */
template <typename T> btree<T>& btree::operator=(btree <T> &&rhs) {
    if( this != rhs ){
        delete this._root;
        delete this._head;
        delete this._tail;
        this._head = nullptr;
        this._tail = nullptr;

        _root(rhs._root);
        _head(rhs._head);
        _tail(rhs._tail);
        _maxNodeElems(rhs._maxNodeElems);
        _treeSize(rhs._treeSize);

        rhs._root = nullptr;
        rhs._head = nullptr;
        rhs._tail = nullptr;
    }
    return *this;
}



template <typename T> typename btree<T>::iterator btree<T>::begin() const {
    return iterator( _head, 0, this );
}
template <typenode T> typename btree<T>::iterator btree<T>::end() const {
    return iterator( nullptr, 0, this );
}
template <typename T> typename btree<T>::reverse_iterator btree<T>::rbegin() const {
    return reverse_iterator( end() );
}
template <typename T> typename btree<T>::reverse_iterator btree<T>::rend() const {
    return reverse_iterator( begin() );
}


template <typename T> typename btree<T>::const_iterator btree<T>::cbegin() const {
    return const_iterator( begin() );
}
template <typename T> typename btree<T>::const_iterator btree<T>::cend() const {
    return const_iterator( end() );
}
template <typename T> typename btree<T>::const_reverse_iterator btree<T>::crbegin() const {
    return const_reverse_iterator( end() );
}
template <typename T> typename btree<T>::const_reverse_iterator btree<T>::crend() const {
    return const_reverse_iterator( begin() );
}




/**
 * Puts a breadth-first traversal of the B-Tree onto the output
 * stream os. Elements must, in turn, support the output operator.
 * Elements are separated by space. Should not output any newlines.
 *
 * @param os a reference to a C++ output stream
 * @param tree a const reference to a B-Tree object
 * @return a reference to os
 */
//friend std::ostream& operator<< <T> (std::ostream& os, const btree<T>& tree);
template <typename T> std::ostream& operator<<( std::ostream& os, const btree<T>& tree ){
    vector<typename btree<T>::Node*> currLevel;
    vector<typename btree<T>::Node*> nextLevel;

    currLevel.push_back( tree._root );
    while( !currLevel.empty() ){
        typename vector<typename btree<T>::Node*>::const_iterator iter;
        for( iter=currLevel.begin(); iter != currLevel.end(); iter++ ){
            typename btree<T>::Node* _node = *iter;
            size_t i;
            for( i=0; i<_node->_size; i++ ){
                os << _node->_elem[i] << " ";
                if( _node->_children[i] != nullptr ){
                    nextLevel.push_back( _node->_children[i] );
                }
            }
            if( _node->_children[i] != nullptr ){
                nextLevel.push_back( _node->_children[i] );
            }
        }
        currLevel = nextLevel;
        nextLevel.clear();
    }
    return os;
}




/**
 * Returns an iterator to the matching element, or whatever
 * the non-const end() returns if the element could
 * not be found.
 *
 * @param elem the client element we are trying to match.  The elem,
 *        if an instance of a true class, relies on the operator< and
 *        and operator== methods to compare elem to elements already
 *        in the btree.  You must ensure that your class implements
 *        these things, else code making use of btree<T>::find will
 *        not compile.
 * @return an iterator to the matching element, or whatever the
 *         non-const end() returns if no such match was ever found.
 */
template <typename T> typename btree<T>::iterator btree<T>::find(const T& elem){
    Node* tmp = _root;
    while( true ){
        size_t i;
        for( i=0; i<tmp->_size; i++ ){
            if( tmp->_elem[i] == elem ){
                return iterator(tmp, i, this);
            } else if( tmp->_elem[i] > elem ){
                if( tmp->_children[i] == nullptr ){
                    return end();
                }
                else {
                    tmp = tmp->_children[i];
                    break;
                }
            }
        }
        if( i == tmp->_size ){
            if( tmp->_children[i] == nullptr ){
                return end();
            }
            else{
                tmp = tmp->_children[i];
                break;
            }
        }
    }
}
/**
 * Identical in functionality to the non-const version of find,
 * save the fact that what's pointed to by the returned iterator
 * is deemed as const and immutable.
 *
 * @param elem the client element we are trying to match.
 * @return an iterator to the matching element, or whatever the
 *         const end() returns if no such match was ever found.
 */
template <typename T> typename btree<T>::const_iterator btree<T>::find(const T& elem) {
    Node *tmp = _root;
    while (true) {
        size_t i;
        for (i = 0; i < tmp->_size; i++) {
            if (tmp->_elem[i] == elem) {
                return const_iterator(tmp, i, this);
            } else if (tmp->_elem[i] > elem) {
                if (tmp->_children[i] == nullptr) {
                    return cend();
                } else {
                    tmp = tmp->_children[i];
                    break;
                }
            }
        }
        if (i == tmp->_size) {
            if (tmp->_children[i] == nullptr) {
                return cend();
            } else {
                tmp = tmp->_children[i];
                break;
            }
        }
    }
}





/**
 * Operation which inserts the specified element
 * into the btree if a matching element isn't already
 * present.  In the event where the element truly needs
 * to be inserted, the size of the btree is effectively
 * increases by one, and the pair that gets returned contains
 * an iterator to the inserted element and true in its first and
 * second fields.
 *
 * If a matching element already exists in the btree, nothing
 * is added at all, and the size of the btree stays the same.  The
 * returned pair still returns an iterator to the matching element, but
 * the second field of the returned pair will store false.  This
 * second value can be checked to after an insertion to decide whether
 * or not the btree got bigger.
 *
 * The insert method makes use of T's zero-arg constructor and
 * operator= method, and if these things aren't available,
 * then the call to btree<T>::insert will not compile.  The implementation
 * also makes use of the class's operator== and operator< as well.
 *
 * @param elem the element to be inserted.
 * @return a pair whose first field is an iterator positioned at
 *         the matching element in the btree, and whose second field
 *         stores true if and only if the element needed to be added
 *         because no matching element was there prior to the insert call.
 */
template <typename T> std::pair<typename btree<T>::iterator, bool> btree<T>::insert( const T& elem){
    Node** ptr = _root;
    Node* parent = nullptr;
    bool new_head = false;
    bool new_tail = false;

    while ( true ){
        Node *tmp = *ptr;
        if( tmp == nullptr ){
            // No element in the current node, create a new Node elem
            *ptr = new Node( elem, _maxEle, parent );
            if( *ptr == _root ){
                _head = _root;
                _tail = _root;
            } else if( new_head == true ){
                _head = *ptr;
                new_head = false;
            } else if( new_tail == true ){
                _tail = *ptr;
                new_tail = false;
            }
            ++_treeSize;
            return std::make_pair( iterator(tmp, 0, this),  true );
        } else {
            size_t i;
            for( i=0; i<tmp->_size; ++i ){
                if( tmp->_elem[i] == elem ){
                    return std::make_pair( iterator(tmp, i, this), false );
                } else if( tmp->_elem[i] > elem ){
                    if( tmp->is_full() ){
                        ptr = &(tmp->_children[i]);
                        break;
                    } else {
                        for(size_t j=tmp->_size-1; j>=i&&j>0; --j){
                            tmp->_elem[j+1] = tmp->_elem[j];
                        }
                        tmp->_elem[i] = elem;
                        break;
                    }
                }
            }
            if( tmp->is_full() ){
                if( i == 0 ){
                    if( tmp == _head ){
                        new_head = true;
                    }
                } else if( i == _maxNodeElems ){
                    ptr = &(tmp->_children[i]);
                    if( tmp == _tail ){
                        new_tail = true;
                    }
                }
                _parent = tmp;
            } else {
                // elem is larger than all exist elements, add to the end
                if( tmp->_size == i ){
                    tmp->_elem[i] = elem;
                }
                ++tmp->_size;
                ++_treeSize;
                return std::make_pair( iterator(tmp, i, this), true );
            }
        }
    }

};

